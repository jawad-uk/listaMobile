// Generated by CoffeeScript 1.6.3
var TodoViewView, _ref,
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  _this = this;

module.exports = TodoViewView = (function(_super) {
  __extends(TodoViewView, _super);

  function TodoViewView() {
    _ref = TodoViewView.__super__.constructor.apply(this, arguments);
    return _ref;
  }

  TodoViewView.prototype.className = 'todo_view';

  return TodoViewView;

})(Backbone.View);

({
  template: require('./templates/todo'),
  tagName: 'li',
  events: {
    'click .check': 'toggleDone',
    'dblclick .todo-content': 'edit',
    'click .todo-destroy': 'clear',
    'keypress .todo-input': 'updateOnEnter'
  },
  initialize: function() {
    this.model.bind('change', this.render);
    return this.model.view = this;
  },
  getRenderData: function() {
    return {
      todo: this.model.toJSON()
    };
  },
  afterRender: function() {
    return this.$('.todo-input').bind('blur', this.update);
  },
  toggleDone: function() {
    return this.model.toggle();
  },
  edit: function() {
    this.$el.addClass('editing');
    return $('.todo-input').focus();
  },
  update: function() {
    _this.model.save({
      content: _this.$('.todo-input').val()
    });
    return _this.$el.removeClass('editing');
  },
  updateOnEnter: function(event) {
    if (event.keyCode === 13) {
      return this.update();
    }
  },
  remove: function() {
    return this.$el.remove();
  },
  clear: function() {
    return this.model.clear();
  }
});
